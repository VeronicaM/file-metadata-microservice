 /******************************************************
  * PLEASE DO NOT EDIT THIS FILE
  * the verification process may break
  * ***************************************************/

 'use strict';
 require('dotenv').config();
 var fs = require('fs');
 var express = require('express');
 var app = express();
 var multer = require('multer');
 var storage = multer.diskStorage({
     destination: function(req, file, callback) {
         callback(null, './uploads');
     },
     filename: function(req, file, callback) {
         callback(null, file.originalname);
     }
 });
 var upload = multer({ storage: storage, dest: './uploads' });

 if (!process.env.DISABLE_XORIGIN) {
     app.use(function(req, res, next) {
         var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
         var origin = req.headers.origin || '*';
         if (!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1) {
             console.log(origin);
             res.setHeader('Access-Control-Allow-Origin', origin);
             res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
         }
         next();
     });
 }

 app.use('/public', express.static(process.cwd() + '/public'));

 app.route('/_api/package.json')
     .get(function(req, res, next) {
         console.log('requested');
         fs.readFile(__dirname + '/package.json', function(err, data) {
             if (err) return next(err);
             res.type('txt').send(data.toString());
         });
     });
 app.route('/upload').post(upload.single('file'), function(req, res) {
     var fileUpload = req.file;
     res.status(200).send({ fileSize: fileUpload.size });
 });
 app.route('/')
     .get(function(req, res) {
         res.sendFile(process.cwd() + '/views/index.html');
     })

 // Respond not found to all the wrong routes
 app.use(function(req, res, next) {
     res.status(404);
     res.type('txt').send('Not found');
 });

 // Error Middleware
 app.use(function(err, req, res, next) {
     if (err) {
         res.status(err.status || 500)
             .type('txt')
             .send(err.message || 'SERVER ERROR');
     }
 })

 app.listen(process.env.PORT, function() {
     console.log('Node.js listening ...');
 });